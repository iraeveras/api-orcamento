// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auditlog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  entity    String
  entityId  String?
  oldData   Json?
  newData   Json?
  ipAddress String?
  createdAt DateTime @default(now())
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String
  email              String               @unique
  password           String
  status             String               @default("active")
  roleId             Int
  role               Role                 @relation(fields: [roleId], references: [id])
  passwordResetToken PasswordResetToken[]
  ledTeams           Team[]               @relation("UserLedTeams")
  companies          UserCompany[]
  lastLogin          DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  level       String
  description String
  permissions RolePermission[]
  users       User[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model PasswordResetToken {
  token     String   @id
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TokenBlacklist {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model RolePermission {
  id        Int      @id @default(autoincrement())
  module    String
  actions   String[]
  scope     String
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCompany {
  id        Int      @id @default(autoincrement())
  userId    Int
  companyId Int
  user      User     @relation(fields: [userId], references: [id])
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id              Int              @id @default(autoincrement())
  cnpj            String
  corporateName   String
  tradeName       String
  userCompanies   UserCompany[]
  departments     Department[]
  sectors         Sector[]
  costCenters     CostCenter[]
  employees       Employee[]
  teams           Team[]
  vacations       Vacation[]
  budgetPeriods   BudgetPeriod[]
  overtimes       Overtime[]
  costCenterPlans CostCenterPlan[]
  status          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Department {
  id          Int          @id @default(autoincrement())
  name        String
  companyId   Int
  company     Company      @relation(fields: [companyId], references: [id])
  sectors     Sector[]
  costCenters CostCenter[]
  employees   Employee[]
  status      String       @default("active")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Ãšnico composto para permitir where por (id, companyId)
  @@unique([id, companyId])
}

model Sector {
  id           Int          @id @default(autoincrement())
  name         String
  companyId    Int
  company      Company      @relation(fields: [companyId], references: [id])
  departmentId Int
  department   Department   @relation(fields: [departmentId], references: [id])
  costCenters  CostCenter[]
  employees    Employee[]
  teams        Team[]
  vacations    Vacation[]
  status       String       @default("active")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model CostCenter {
  id           Int        @id @default(autoincrement())
  name         String
  code         String
  status       String     @default("active")
  companyId    Int
  company      Company    @relation(fields: [companyId], references: [id])
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  sectorId     Int
  sector       Sector     @relation(fields: [sectorId], references: [id])
  employees    Employee[]
  overtimes    Overtime[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Team {
  id        Int          @id @default(autoincrement())
  name      String
  companyId Int
  company   Company      @relation(fields: [companyId], references: [id])
  sectorId  Int
  sector    Sector       @relation(fields: [sectorId], references: [id])
  leaderId  Int // FK para Employee (ou User, dependendo da sua estrutura)
  leader    User         @relation("UserLedTeams", fields: [leaderId], references: [id])
  members   TeamMember[]
  status    String       @default("active")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Employee {
  id                 Int                 @id @default(autoincrement())
  matricula          String              @unique
  name               String
  admission          DateTime
  position           String
  salary             Float
  dangerPay          Boolean             @default(false)
  monthlyHours       Float
  workSchedule       String
  status             String              @default("Ativo")
  companyId          Int
  company            Company             @relation(fields: [companyId], references: [id])
  departmentId       Int
  department         Department          @relation(fields: [departmentId], references: [id])
  sectorId           Int
  sector             Sector              @relation(fields: [sectorId], references: [id])
  costcenterId       Int
  costcenter         CostCenter          @relation(fields: [costcenterId], references: [id], onUpdate: Cascade)
  acquisitionPeriods AcquisitionPeriod[]
  vacations          Vacation[]
  teams              TeamMember[]
  overtimes          Overtime[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model TeamMember {
  team       Team     @relation(fields: [teamId], references: [id])
  teamId     Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([teamId, employeeId])
}

enum BudgetPeriodStatus {
  open
  closed
  pending
}

model BudgetPeriod {
  id          Int                @id @default(autoincrement())
  year        Int
  companyId   Int
  company     Company            @relation(fields: [companyId], references: [id])
  startDate   DateTime
  endDate     DateTime
  status      BudgetPeriodStatus
  description String
  closedBy    String?
  closedAt    DateTime?
  vacations   Vacation[]
  overtimes   Overtime[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@unique([companyId, year])
}

model AcquisitionPeriod {
  id         Int      @id @default(autoincrement())
  employeeId Int
  startDate  DateTime
  endDate    DateTime
  year       Int
  status     String   @default("open")
  employee   Employee @relation(fields: [employeeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Vacation {
  id                     Int          @id @default(autoincrement())
  employeeId             Int
  companyId              Int
  sectorId               Int
  budgetPeriodId         Int
  acquisitionPeriodStart DateTime
  acquisitionPeriodEnd   DateTime
  month                  Int
  year                   Int
  vacationDays           Int
  abonoDays              Int
  thirteenthAdvance      Boolean
  baseSalary             Decimal
  overtimeAverage        Decimal
  vacationValue          Decimal
  onethirdValue          Decimal
  abonoValue             Decimal
  abonoOnethirdValue     Decimal
  status                 String       @default("scheduled")
  employee               Employee     @relation(fields: [employeeId], references: [id])
  company                Company      @relation(fields: [companyId], references: [id])
  sector                 Sector       @relation(fields: [sectorId], references: [id])
  budgetPeriod           BudgetPeriod @relation(fields: [budgetPeriodId], references: [id])
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
}

// --- enum
enum OvertimeStatus {
  open
  closed
  pending
}

// --- model principal
model Overtime {
  id             Int          @id @default(autoincrement())
  year           Int
  month          Int
  companyId      Int
  company        Company      @relation(fields: [companyId], references: [id])
  costCenterId   Int
  costCenter     CostCenter   @relation(fields: [costCenterId], references: [id])
  employeeId     Int
  employee       Employee     @relation(fields: [employeeId], references: [id])
  budgetPeriodId Int
  budgetPeriod   BudgetPeriod @relation(fields: [budgetPeriodId], references: [id])

  function String

  // quantidades
  he50Qty        Int @default(0)
  he100Qty       Int @default(0)
  holidayDaysQty Int @default(0)
  nightHoursQty  Int @default(0)

  // horas
  normalHours     Int @default(0)
  overtime50      Int @default(0)
  overtime100     Int @default(0)
  holidayHours    Int @default(0)
  nightShiftHours Int @default(0)

  // valores
  overtime50Value    Decimal @default(0)
  overtime100Value   Decimal @default(0)
  he50Value          Decimal @default(0)
  he100Value         Decimal @default(0)
  holidayValue       Decimal @default(0)
  nightShiftValue    Decimal @default(0)
  nightValue         Decimal @default(0)
  dsrValue           Decimal @default(0)
  dsrNightValue      Decimal @default(0)
  additionalValue    Decimal @default(0)
  totalValue         Decimal @default(0)
  budgetedAmount     Decimal @default(0)
  previousYearTotal  Decimal @default(0)
  variance           Decimal @default(0)
  variancePercentage Decimal @default(0)

  justification String? // opcional

  status OvertimeStatus @default(open)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CostCenterPlan {
  id                   Int                  @id @default(autoincrement())
  codPlanoCentroCusto  String
  nomePlanoCentroCusto String
  companyId            Int
  company              Company              @relation(fields: [companyId], references: [id])
  items                CostCenterPlanItem[]
  status               String               @default("active")
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt

  // Evita duplicidade do "cÃ³digo" por empresa
  @@unique([companyId, codPlanoCentroCusto])
}

model CostCenterPlanItem {
  id                       Int            @id @default(autoincrement())
  planoCentroCustoId       Int
  plan                     CostCenterPlan @relation(fields: [planoCentroCustoId], references: [id])
  codPlanoCentroCustoItem  String
  nomePlanoCentroCustoItem String
  status                   String         @default("active")
  expenseTypes             ExpenseType[]
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt

  // Evita duplicidade de cÃ³digo dentro do mesmo plano
  @@unique([planoCentroCustoId, codPlanoCentroCustoItem])
}

model ExpenseType {
  id                     Int                @id @default(autoincrement())
  planoCentroCustoItemId Int
  planItem               CostCenterPlanItem @relation(fields: [planoCentroCustoItemId], references: [id])
  codTipoDespesa         String
  nomeTipoDespesa        String
  status                 String             @default("active")
  expenseSubtypes        ExpenseSubtype[]
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  // Evita duplicidade de cÃ³digo dentro do mesmo Item do Plano
  @@unique([planoCentroCustoItemId, codTipoDespesa])
}

model ExpenseSubtype {
  id                 Int         @id @default(autoincrement())
  tipoDespesaId      Int
  expenseType        ExpenseType @relation(fields: [tipoDespesaId], references: [id])
  codSubtipoDespesa  String
  nomeSubtipoDespesa String
  status             String      @default("active")
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  // evita duplicidade do cÃ³digo dentro do mesmo Tipo de Despesa
  @@unique([tipoDespesaId, codSubtipoDespesa])
}
