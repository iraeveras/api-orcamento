// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auditlog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  entity    String
  entityId  String?
  oldData   Json?
  newData   Json?
  ipAddress String?
  createdAt DateTime @default(now())
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String
  email              String               @unique
  password           String
  roleId             Int
  role               Role                 @relation(fields: [roleId], references: [id])
  passwordResetToken PasswordResetToken[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  level       String
  description String
  permissions RolePermission[]
  users       User[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model PasswordResetToken {
  token     String   @id
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RolePermission {
  id        Int      @id @default(autoincrement())
  module    String
  actions   String[]
  scope     String
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id            Int          @id @default(autoincrement())
  cnpj          String
  corporateName String
  tradeName     String
  departments   Department[]
  sectors       Sector[]
  costCenters   CostCenter[]
  employees     Employee[]
  status        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Department {
  id          Int          @id @default(autoincrement())
  name        String
  companyId   Int
  company     Company      @relation(fields: [companyId], references: [id])
  sectors     Sector[]
  costCenters CostCenter[]
  employees   Employee[]
  status      String       @default("active")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Sector {
  id           Int          @id @default(autoincrement())
  name         String
  companyId    Int
  company      Company      @relation(fields: [companyId], references: [id])
  departmentId Int
  department   Department   @relation(fields: [departmentId], references: [id])
  costCenters  CostCenter[]
  employees    Employee[]
  status       String       @default("active")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model CostCenter {
  id           Int        @id @default(autoincrement())
  name         String
  code         String
  status       String     @default("active")
  companyId    Int
  company      Company    @relation(fields: [companyId], references: [id])
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  sectorId     Int
  sector       Sector     @relation(fields: [sectorId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Employee {
  id                 Int                 @id @default(autoincrement())
  matricula          String
  name               String
  admission          DateTime
  position           String
  salary             Float
  dangerPay          Boolean             @default(false)
  status             String              @default("Ativo")
  companyId          Int
  company            Company             @relation(fields: [companyId], references: [id])
  departmentId       Int
  department         Department          @relation(fields: [departmentId], references: [id])
  sectorId           Int
  sector             Sector              @relation(fields: [sectorId], references: [id])
  acquisitionPeriods AcquisitionPeriod[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model AcquisitionPeriod {
  id         Int      @id @default(autoincrement())
  employeeId Int
  startDate  DateTime
  endDate    DateTime
  year       Int
  status     String   @default("open")
  employee   Employee @relation(fields: [employeeId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
